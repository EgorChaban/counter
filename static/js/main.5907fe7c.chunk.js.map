{"version":3,"sources":["button/button.module.css","Counters/counter.module.css","screen/Screen.tsx","button/Button.tsx","Counters/Counter.tsx","Counters/SetCounter.tsx","redux/App-reducer.ts","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","screen/screen.module.css","App.module.css"],"names":["module","exports","Screen","props","screenClass","value","maxValue","error","s","displayValue","errorValue","className","Button","btn","onClick","changeValue","disabled","isDisabled","title","Counter","counter","btnWrap","upValue","resetValue","SetCounter","inputClassName","errorInput","input","type","onChange","changeMaxValue","changeStartValue","startValue","setCounterStartValue","initialState","localStorage","Number","App","mainApp","useSelector","state","mainReducer","dispatch","useDispatch","counterWrap","e","changeMaxValueAC","changeStartValueAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","valueNumber","currentTarget","valueAsNumber","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5907fe7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__2KlRX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter_counter__2VL4M\",\"btnWrap\":\"counter_btnWrap__1MbVJ\",\"input\":\"counter_input__3U6cd\",\"errorInput\":\"counter_errorInput__2FUG1\"};","import React from 'react'\r\nimport s from'./screen.module.css'\r\n\r\n\r\nexport type screenType = {\r\n    value: number | 'enter values and press \"set\"' | 'incorrect value'\r\n    maxValue:number\r\n    error: boolean\r\n}\r\n\r\nexport function Screen(props: screenType){\r\n\r\n    const screenClass = props.value === props.maxValue || props.error === true ? `${s.displayValue}  ${s.errorValue}` : s.displayValue\r\n\r\n    return(\r\n        <div className={screenClass} >\r\n            {props.error ===true ? 'incorrect value' : props.value}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from'./button.module.css'\r\n\r\n\r\ntype btnType = {\r\n    title: string\r\n    changeValue: () => void\r\n    isDisabled: boolean\r\n}\r\n\r\n\r\n\r\nexport function Button(props: btnType) {\r\n    return(\r\n        <button className={s.btn}\r\n                onClick={props.changeValue}\r\n                disabled={props.isDisabled}\r\n        >\r\n            {props.title}\r\n        </button>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {Screen} from \"../screen/Screen\";\r\nimport {Button} from \"../button/Button\";\r\nimport s from './counter.module.css'\r\n\r\n\r\ntype CounterType = {\r\n    value: number | 'enter values and press \"set\"' | 'incorrect value'\r\n    upValue:()=>void\r\n    resetValue:()=>void\r\n    maxValue:number\r\n    error: boolean\r\n}\r\n\r\nexport function Counter (props: CounterType){\r\n    return(\r\n        <div className={s.counter} >\r\n            <Screen value = {props.value}\r\n                    maxValue={props.maxValue}\r\n                    error = {props.error}\r\n            />\r\n            <div className={s.btnWrap}>\r\n                <Button title='inc' changeValue={props.upValue} isDisabled={props.value === props.maxValue || props.error === true}\r\n                />\r\n                <Button title='reset' changeValue={props.resetValue} isDisabled={props.value === 0 || props.error === true}\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport {Button} from \"../button/Button\";\r\nimport s from './counter.module.css'\r\n\r\nexport type SetCounterPropsType={\r\n    changeMaxValue:(e:ChangeEvent<HTMLInputElement>)=>void\r\n    changeStartValue:(e:ChangeEvent<HTMLInputElement>)=>void\r\n    setCounterStartValue:()=>void\r\n    startValue:number\r\n    maxValue:number\r\n    error: boolean\r\n}\r\n\r\n\r\nexport function SetCounter(props: SetCounterPropsType){\r\n    const inputClassName = props.error === true ? s.errorInput : s.input\r\n\r\n    return(\r\n        <div className={s.counter} >\r\n            <input type=\"number\" onChange={props.changeMaxValue} value={props.maxValue} className={inputClassName}/>\r\n            <input type=\"number\" onChange={props.changeStartValue} value={props.startValue} className={inputClassName}/>\r\n            <div className={s.btnWrap}>\r\n                <Button title='set' isDisabled={ props.error === true} changeValue={props.setCounterStartValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ChangeEvent} from \"react\";\r\n\r\nexport type StateType = {\r\n    value: number | 'enter values and press \"set\"' | 'incorrect value',\r\n    maxValue: number,\r\n    startValue: number,\r\n    error: boolean\r\n}\r\n\r\nexport const initialState: StateType = {\r\n    value: 'enter values and press \"set\"',\r\n    maxValue: localStorage['max'] ? Number(localStorage['max']) : 1,\r\n    startValue: localStorage['start'] ? Number(localStorage['start']) : 0,\r\n    error: false\r\n}\r\n\r\n\r\nexport type ACTypes =\r\n    changeMaxValueACType\r\n    |changeStartValueACType\r\n    |setCounterStartValueACType\r\n    |upValueACType\r\n    |resetValueACType\r\n\r\nexport const appReducer = (state = initialState, action: ACTypes): StateType => {\r\n    let copyState = {...state}\r\n    switch (action.type) {\r\n        case 'CHANGE-MAX-VALUE': {\r\n            let valueNumber = action.e.currentTarget.valueAsNumber\r\n            copyState.maxValue = valueNumber\r\n            if (valueNumber < 0\r\n                || valueNumber === copyState.startValue\r\n                || valueNumber < copyState.startValue\r\n            ) {\r\n                copyState.error = true\r\n            } else {\r\n                copyState.error = false\r\n            }\r\n            if (valueNumber !== copyState.startValue) {\r\n                copyState.value = 'enter values and press \"set\"'\r\n            }\r\n            return copyState\r\n        }\r\n\r\n        case 'CHANGE-START-VALUE': {\r\n            let valueNumber = action.e.currentTarget.valueAsNumber\r\n            copyState.startValue = valueNumber\r\n            if (valueNumber < 0\r\n                || valueNumber === copyState.maxValue\r\n                || valueNumber > copyState.maxValue\r\n            ) {\r\n                copyState.error = true\r\n            } else {\r\n                copyState.error = false\r\n            }\r\n            if (valueNumber !== copyState.startValue) {\r\n                copyState.value = ('enter values and press \"set\"')\r\n            }\r\n            return copyState\r\n        }\r\n\r\n        case 'SET-START-VALUE': {\r\n             copyState.value = state.startValue\r\n            return copyState\r\n        }\r\n\r\n        case 'UP-VALUE':{\r\n            if(typeof state.value === 'number'){\r\n                copyState.value = state.value + 1\r\n            }\r\n            return copyState\r\n        }\r\n\r\n        case 'RESET-VALUE':{\r\n            copyState.value = state.startValue\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport type changeMaxValueACType = {\r\n    type: 'CHANGE-MAX-VALUE'\r\n    e: ChangeEvent<HTMLInputElement>\r\n}\r\n\r\nexport const changeMaxValueAC = (e: ChangeEvent<HTMLInputElement>): changeMaxValueACType => {\r\n    return {\r\n        type: 'CHANGE-MAX-VALUE',\r\n        e\r\n    }\r\n}\r\n\r\nexport type changeStartValueACType = {\r\n    type: 'CHANGE-START-VALUE',\r\n    e: ChangeEvent<HTMLInputElement>\r\n}\r\nexport const changeStartValueAC = (e: ChangeEvent<HTMLInputElement>): changeStartValueACType => {\r\n    return{\r\n        type: \"CHANGE-START-VALUE\",\r\n        e\r\n    }\r\n}\r\nexport type setCounterStartValueACType = {\r\n    type: 'SET-START-VALUE',\r\n}\r\nexport const setCounterStartValueAC = ():setCounterStartValueACType =>{\r\n    return {type: 'SET-START-VALUE'}\r\n}\r\n\r\nexport type upValueACType = {\r\n    type: 'UP-VALUE'\r\n}\r\nexport const upValueAC = (): upValueACType => {\r\n    return {type: \"UP-VALUE\"}\r\n}\r\nexport type resetValueACType = {\r\n    type: 'RESET-VALUE'\r\n}\r\nexport const resetValueAC = (): resetValueACType=> {\r\n    return {type: \"RESET-VALUE\"}\r\n}","import s from './App.module.css';\nimport React, {ChangeEvent, useState} from \"react\";\n\nimport {Counter} from \"./Counters/Counter\";\nimport {SetCounter} from \"./Counters/SetCounter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./redux/store\";\nimport {\n    changeMaxValueAC,\n    changeStartValueAC,\n    changeStartValueACType, resetValueAC,\n    setCounterStartValueAC,\n    StateType, upValueAC\n} from \"./redux/App-reducer\";\n\n\n\n\nfunction App() {\n\n//setCounter BLL:\n\n    const mainApp = useSelector <AppRootStateType, StateType>(state => state.mainReducer)\n    const dispatch = useDispatch()\n\n\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changeMaxValueAC(e))\n    }\n\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n       dispatch(changeStartValueAC(e))\n    }\n\n    const setCounterStartValue = () => {\n      dispatch(setCounterStartValueAC())\n    }\n\n\n//counter BLL:\n\n    const upValue = () => {\n       dispatch(upValueAC())\n    }\n\n    const resetValue = () => {\n        dispatch(resetValueAC())\n    }\n\n\n\n\n    return (\n        <div className={s.App}>\n            <div className={s.counterWrap}>\n                <SetCounter\n                    setCounterStartValue={setCounterStartValue}\n                    changeMaxValue={changeMaxValue}\n                    changeStartValue={changeStartValue}\n                    startValue={mainApp.startValue}\n                    maxValue={mainApp.maxValue}\n                    error={mainApp.error}\n\n                />\n                <Counter\n                    value={mainApp.value}\n                    upValue={upValue}\n                    resetValue={resetValue}\n                    maxValue={mainApp.maxValue}\n                    error={mainApp.error}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {appReducer} from \"./App-reducer\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\n\r\nconst rootReducer = combineReducers({\r\n    mainReducer: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayValue\":\"screen_displayValue__1Qb20\",\"errorValue\":\"screen_errorValue__3oGFl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1V1pJ\",\"counterWrap\":\"App_counterWrap__2XxwQ\"};"],"sourceRoot":""}