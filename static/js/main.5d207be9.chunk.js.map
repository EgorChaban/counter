{"version":3,"sources":["Counters/counter.module.css","screen/screen.module.css","App.module.css","button/button.module.css","screen/Screen.tsx","button/Button.tsx","Counters/Counter.tsx","Counters/SetCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Screen","props","screenClass","value","maxValue","error","s","displayValue","errorValue","className","Button","btn","onClick","changeValue","disabled","isDisabled","title","Counter","counter","btnWrap","upValue","resetValue","SetCounter","inputClassName","errorInput","input","type","onChange","changeMaxValue","changeStartValue","startValue","setCounterStartValue","App","useState","setValue","localStorage","Number","setMaxValue","setStartValue","setError","counterWrap","e","valueNumber","currentTarget","valueAsNumber","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d207be9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter_counter__2VL4M\",\"btnWrap\":\"counter_btnWrap__1MbVJ\",\"input\":\"counter_input__3U6cd\",\"errorInput\":\"counter_errorInput__2FUG1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayValue\":\"screen_displayValue__1Qb20\",\"errorValue\":\"screen_errorValue__3oGFl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1V1pJ\",\"counterWrap\":\"App_counterWrap__2XxwQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__2KlRX\"};","import React from 'react'\r\nimport s from'./screen.module.css'\r\n\r\n\r\nexport type screenType = {\r\n    value: number | 'enter values and press \"set\"' | 'incorrect value'\r\n    maxValue:number\r\n    error: boolean\r\n}\r\n\r\nexport function Screen(props: screenType){\r\n\r\n    const screenClass = props.value === props.maxValue || props.error === true ? `${s.displayValue}  ${s.errorValue}` : s.displayValue\r\n\r\n    return(\r\n        <div className={screenClass} >\r\n            {props.error ===true ? 'incorrect value' : props.value}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from'./button.module.css'\r\n\r\n\r\ntype btnType = {\r\n    title: string\r\n    changeValue: () => void\r\n    isDisabled: boolean\r\n}\r\n\r\n\r\n\r\nexport function Button(props: btnType) {\r\n    return(\r\n        <button className={s.btn}\r\n                onClick={props.changeValue}\r\n                disabled={props.isDisabled}\r\n        >\r\n            {props.title}\r\n        </button>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {Screen} from \"../screen/Screen\";\r\nimport {Button} from \"../button/Button\";\r\nimport s from './counter.module.css'\r\n\r\n\r\ntype CounterType = {\r\n    value: number | 'enter values and press \"set\"' | 'incorrect value'\r\n    upValue:()=>void\r\n    resetValue:()=>void\r\n    maxValue:number\r\n    error: boolean\r\n}\r\n\r\nexport function Counter (props: CounterType){\r\n    return(\r\n        <div className={s.counter} >\r\n            <Screen value = {props.value}\r\n                    maxValue={props.maxValue}\r\n                    error = {props.error}\r\n            />\r\n            <div className={s.btnWrap}>\r\n                <Button title='inc' changeValue={props.upValue} isDisabled={props.value === props.maxValue || props.error === true}\r\n                />\r\n                <Button title='reset' changeValue={props.resetValue} isDisabled={props.value === 0 || props.error === true}\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport {Button} from \"../button/Button\";\r\nimport s from './counter.module.css'\r\n\r\nexport type SetCounterPropsType={\r\n    changeMaxValue:(e:ChangeEvent<HTMLInputElement>)=>void\r\n    changeStartValue:(e:ChangeEvent<HTMLInputElement>)=>void\r\n    setCounterStartValue:()=>void\r\n    startValue:number\r\n    maxValue:number\r\n    error: boolean\r\n}\r\n\r\n\r\nexport function SetCounter(props: SetCounterPropsType){\r\n    const inputClassName = props.error === true ? s.errorInput : s.input\r\n\r\n    return(\r\n        <div className={s.counter} >\r\n            <input type=\"number\" onChange={props.changeMaxValue} value={props.maxValue} className={inputClassName}/>\r\n            <input type=\"number\" onChange={props.changeStartValue} value={props.startValue} className={inputClassName}/>\r\n            <div className={s.btnWrap}>\r\n                <Button title='set' isDisabled={ props.error === true} changeValue={props.setCounterStartValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from './App.module.css';\nimport React, {ChangeEvent, useState} from \"react\";\n\nimport {Counter} from \"./Counters/Counter\";\nimport {SetCounter} from \"./Counters/SetCounter\";\n\nfunction App() {\n//STATES\n    const [value, setValue] = useState<number | 'enter values and press \"set\"' | 'incorrect value'>('enter values and press \"set\"')\n    const [maxValue, setMaxValue] = useState<number>(localStorage['max'] ? Number(localStorage['max']) : 1)\n    const [startValue, setStartValue] = useState<number>(localStorage['start'] ? Number(localStorage['start']) : 0)\n    const [error, setError] = useState<boolean>(false)\n\n\n//setCounter BLL:\n\n\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n\n        const valueNumber = e.currentTarget.valueAsNumber\n        setMaxValue(valueNumber)\n        if (valueNumber < 0\n            || valueNumber === startValue\n            || valueNumber < startValue\n        ) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n        if (valueNumber !== startValue) {\n            setValue('enter values and press \"set\"')\n        }\n    }\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        const valueNumber = e.currentTarget.valueAsNumber\n        setStartValue(valueNumber)\n        if (valueNumber < 0\n            || valueNumber === maxValue\n            || valueNumber > maxValue\n        ) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n        if (valueNumber !== startValue) {\n            setValue('enter values and press \"set\"')\n        }\n\n    }\n    const setCounterStartValue = () => {\n        setValue(startValue)\n        localStorage['start'] = startValue\n        localStorage['max'] = maxValue\n    }\n\n\n//counter BLL:\n    const upValue = () => {\n        if (typeof value === \"number\") {\n            setValue(value + 1)\n        }\n    }\n    const resetValue = () => {\n        setValue(startValue)\n    }\n\n\n    return (\n        <div className={s.App}>\n            <div className={s.counterWrap}>\n                <SetCounter\n                    setCounterStartValue={setCounterStartValue}\n                    changeMaxValue={changeMaxValue}\n                    changeStartValue={changeStartValue}\n                    startValue={startValue}\n                    maxValue={maxValue}\n                    error={error}\n\n                />\n                <Counter\n                    value={value}\n                    upValue={upValue}\n                    resetValue={resetValue}\n                    maxValue={maxValue}\n                    error={error}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}